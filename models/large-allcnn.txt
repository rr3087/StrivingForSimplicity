%% input of 126x126 with augmentation

layer0 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=dropout_input,
    filter_shape=(320, 3, 2, 2),
    image_shape=(batch_size, 3, 126, 126),
    ssample=(1,1),
    bordermode='valid',
    p=1.0,
    alpha=0.5  ##leaky relu
    )

layer1 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer0.output,
    filter_shape=(320, 320, 2, 2),
    image_shape=(batch_size, 320, 125, 125),
    ssample=(1,1),
    bordermode='valid',
    p=1.0,
    alpha=0.5  ##leaky relu
)

layer2 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer1.output,
    filter_shape=(320, 320, 2, 2),
    image_shape=(batch_size, 320, 124, 124),
    ssample=(2,2),
    bordermode='valid',
    p=1.0,
    alpha=0.5  ##leaky relu
)

layer3 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer2.output,
    filter_shape=(640, 320, 2, 2),
    image_shape=(batch_size, 320, 62, 62),
    ssample=(1,1),
    bordermode='valid',
    p=0.9,
    alpha=0.5  ##leaky relu
)

layer4 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer3.output,
    filter_shape=(640, 640, 2, 2),
    image_shape=(batch_size, 640, 61, 61),
    ssample=(1,1),
    bordermode='valid',
    p=0.9,
    alpha=0.5  ##leaky relu
)

layer5 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer4.output,
    filter_shape=(640, 640, 2, 2),
    image_shape=(batch_size, 640, 60, 60),
    ssample=(2,2),
    bordermode='valid',
    p=1.0,
    alpha=0.5  ##leaky relu
)

layer6 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer5.output,
    filter_shape=(960, 640, 2, 2),
    image_shape=(batch_size, 640, 30, 30),
    ssample=(1,1),
    bordermode='valid',
    p=0.8,
    alpha=0.5  ##leaky relu
)

layer7 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer6.output,
    filter_shape=(960, 960, 2, 2),
    image_shape=(batch_size, 960, 29, 29),
    ssample=(1,1),
    bordermode='valid',
    p=0.8,
    alpha=0.5  ##leaky relu
)

layer8 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer7.output,
    filter_shape=(960, 960, 2, 2),
    image_shape=(batch_size, 960, 28, 28),
    ssample=(2,2),
    bordermode='valid',
    p=1.0,
    alpha=0.5  ##leaky relu
)

layer9 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer8.output,
    filter_shape=(1280, 960, 2, 2),
    image_shape=(batch_size, 960, 14, 14),
    ssample=(1,1),
    bordermode='valid',
    p=0.7,
    alpha=0.5  ##leaky relu
)

layer10 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer9.output,
    filter_shape=(1280, 1280, 2, 2),
    image_shape=(batch_size, 1280, 13, 13),
    ssample=(1,1),
    bordermode='valid',
    p=0.7,
    alpha=0.5  ##leaky relu
)

layer11 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer10.output,
    filter_shape=(1280, 1280, 2, 2),
    image_shape=(batch_size, 1280, 12, 12),
    ssample=(2,2),
    bordermode='valid',
    p=1.0,
    alpha=0.5  ##leaky relu
)

layer12 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer11.output,
    filter_shape=(1600, 1280, 2, 2),
    image_shape=(batch_size, 1280, 6, 6),
    ssample=(1,1),
    bordermode='valid',
    p=0.6,
    alpha=0.5  ##leaky relu
)

layer13 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer12.output,
    filter_shape=(1600, 1600, 2, 2),
    image_shape=(batch_size, 1600, 5, 5),
    ssample=(1,1),
    bordermode='valid',
    p=0.6,
    alpha=0.5  ##leaky relu
)

layer14 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer13.output,
    filter_shape=(1600, 1600, 2, 2),
    image_shape=(batch_size, 1600, 4, 4),
    ssample=(2,2),
    bordermode='valid',
    p=1.0,
    alpha=0.5  ##leaky relu
)

layer15 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer14.output,
    filter_shape=(1920, 1600, 2, 2),
    image_shape=(batch_size, 1600, 2, 2),
    ssample=(1,1)
    bordermode='valid',
    p=0.5,
    alpha=0.5  ##leaky relu
)

layer16 = myConvLayer(
    rng,
    is_train=training_enabled,
    input_data=layer15.output,
    filter_shape=(1920, 1920, 1, 1),
    image_shape=(batch_size, 1920, 1, 1),
    ssample=(1,1),
    bordermode='valid',
    p=0.5,
    alpha=0.5  ##leaky relu
)

# make sure this is what global averaging does
## no global_average=layer8.output.mean(axis=(2,3))
## directly softmax layer
